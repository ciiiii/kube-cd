rbac:
  create: true
  pspEnabled: true
  pspUseAppArmor: true
  namespaced: false
  extraRoleRules: []
  extraClusterRoleRules: []

serviceAccount:
  create: true
  name:
  nameTest:

replicas: 1
podDisruptionBudget: {}

deploymentStrategy:
  type: RollingUpdate

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

image:
  repository: registry.cn-shanghai.aliyuncs.com/docker_mirror_image/grafana.grafana
  tag: 6.7.3
  pullPolicy: IfNotPresent

testFramework:
  enabled: false

securityContext:
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472


extraConfigmapMounts: []
extraEmptyDirMounts: []

downloadDashboardsImage:
  repository: registry.cn-shanghai.aliyuncs.com/docker_mirror_image/curlimages.curl
  tag: 7.68.0
  pullPolicy: IfNotPresent

downloadDashboards:
  env: {}
  resources: {}

podPortName: grafana

service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations: {}
  labels: {}
  portName: service

extraExposePorts: []

ingress:
  enabled: false

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
extraInitContainers: []
extraContainers: |
extraContainerVolumes: []
persistence:
  type: pvc
  enabled: true
  storageClassName: "nfs"
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  finalizers:
    - kubernetes.io/pvc-protection

initChownData:
  enabled: true
  image:
    repository: registry.cn-shanghai.aliyuncs.com/docker_mirror_image/library.busybox
    tag: "1.31.1"
    pullPolicy: IfNotPresent
  resources: {}

adminUser: admin
# adminPassword: strongpassword

admin:
  existingSecret: ""
  userKey: admin-user
  passwordKey: admin-password

env: {}
envValueFrom: {}
envFromSecret: ""
envRenderSecret: {}
extraSecretMounts: []
extraVolumeMounts: []
plugins: []
datasources: {}
notifiers: {}
dashboardProviders: {}
#  dashboardproviders.yaml:
#    apiVersion: 1
#    providers:
#    - name: 'default'
#      orgId: 1
#      folder: ''
#      type: file
#      disableDeletion: false
#      editable: true
#      options:
#        path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards: {}
  # default:
  #   some-dashboard:
  #     json: |
  #       $RAW_JSON
  #   custom-dashboard:
  #     file: dashboards/custom-dashboard.json
  #   prometheus-stats:
  #     gnetId: 2
  #     revision: 2
  #     datasource: Prometheus
  #   local-dashboard:
  #     url: https://example.com/repository/test.json
  #   local-dashboard-base64:
  #     url: https://example.com/repository/test-b64.json
  #     b64content: true

## Reference to external ConfigMap per provider. Use provider name as key and ConfiMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##
dashboardsConfigMaps: {}
#  default: ""

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net

ldap:
  enabled: false

smtp:
  existingSecret: ""
  userKey: "user"
  passwordKey: "password"

sidecar:
  image: registry.cn-shanghai.aliyuncs.com/docker_mirror_image/kiwigrid.k8s-sidecar:0.1.99
  imagePullPolicy: IfNotPresent
  resources: {}

  dashboards:
    enabled: false
    
  datasources:
    enabled: false
   

namespaceOverride: ""
